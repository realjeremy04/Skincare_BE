import { NextFunction, Request, Response } from "express";
import Feedback from "$models/Feeback.model";

/**
 * @swagger
 * components:
 *   schemas:
 *     Feedback:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The unique identifier for the feedback (auto-generated by MongoDB)
 *           readOnly: true
 *         accountId:
 *           type: string
 *           description: The unique identifier of the account providing the feedback
 *         appointmentId:
 *           type: string
 *           description: The unique identifier of the appointment associated with the feedback
 *         serviceId:
 *           type: string
 *           description: The unique identifier of the service being reviewed
 *         therapistId:
 *           type: string
 *           description: The unique identifier of the therapist receiving feedback
 *         images:
 *           type: string
 *           description: URL of the feedback images
 *         comment:
 *           type: string
 *           description: The comment provided in the feedback
 *         rating:
 *           type: number
 *           description: The rating given in the feedback (e.g., from 1 to 5)
 *       required:
 *         - accountId
 *         - appointmentId
 *         - serviceId
 *         - therapistId
 *         - rating
 */

// Get all feedback
/**
 * @swagger
 * /api/feedback:
 *   get:
 *     summary: Retrieve a list of all feedback
 *     tags:
 *       - Feedback
 *     responses:
 *       200:
 *         description: A list of feedback
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Feedback'
 *       404:
 *         description: No feedback found
 *       500:
 *         description: Server error
 */
const getAllFeedback = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const feedbacks = await Feedback.find();

    res.status(404).json({ message: "No feedbacks found" });

    res.status(200).json(feedbacks);
  } catch (err: Error | any) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Get one feedback
/**
 * @swagger
 * /api/feedback/{id}:
 *   get:
 *     summary: Retrieve a single feedback by ID
 *     tags:
 *       - Feedback
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: The feedback ID
 *     responses:
 *       200:
 *         description: A single feedback
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Feedback'
 *       404:
 *         description: Feedback not found
 *       500:
 *         description: Server error
 */
const getFeedback = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const feedback = await Feedback.findById(req.params.id);

    if (!feedback) {
      res.status(404).json({ message: "Feedback not found" });
    }

    res.status(200).json(feedback);
  } catch (err: Error | any) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Create one feedback
/**
 * @swagger
 * /api/feedback:
 *   post:
 *     summary: Create a new feedback
 *     tags:
 *       - Feedback
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Feedback'
 *     responses:
 *       201:
 *         description: The created feedback
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Feedback'
 *       400:
 *         description: Bad request
 *       500:
 *         description: Server error
 */
const createFeedback = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    if (
      !req.body.accountId ||
      !req.body.appointmentId ||
      !req.body.serviceId ||
      !req.body.therapistId ||
      !req.body.rating
    ) {
      res.status(400).json({ message: "Bad request" });
    }

    const feedback = new Feedback({
      accountId: req.body.accountId,
      appointmentId: req.body.appointmentId,
      serviceId: req.body.serviceId,
      therapistId: req.body.therapistId,
      rating: req.body.rating,
    });

    const newFeedback = await feedback.save();
    res.status(200).json(newFeedback);
  } catch (err: Error | any) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Delete one feedback
/**
 * @swagger
 * /api/feedback/{id}:
 *   delete:
 *     summary: Delete an feedback by ID
 *     description: This endpoint allows the deletion of an feedback based on its ID. Returns the deleted feedback if successful.
 *     tags:
 *       - Feedback
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID of the feedback to delete
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Feedback deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request, invalid ID format
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       404:
 *         description: Feedback not found
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 */
const deleteFeedback = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const feedback = await Feedback.findByIdAndDelete(req.params.id);
    res.status(200).json(feedback);
  } catch (err: Error | any) {
    res.status(500).json({ message: err.message });
  }
};

// Update one feedback
/**
 * @swagger
 * /api/feedback/{id}:
 *   put:
 *     summary: Update an feedback by ID
 *     description: This endpoint allows the updating of an feedback based on its ID. Returns the updated feedback if successful.
 *     tags:
 *       - Feedback
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID of the feedback to update
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Feedback'
 *     responses:
 *       200:
 *         description: Feedback after updated
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Feedback'
 *       404:
 *         description: Feedback not found
 *       500:
 *         description: Server error
 */
const updateFeedback = async (req: Request, res: Response) => {
  try {
    const feedback = await Feedback.findByIdAndUpdate(req.params.id, req.body);
    res.status(200).json(feedback);
  } catch (err: Error | any) {
    res.status(500).json({ message: err.message });
  }
};

const FeedbackAPI = {
  getFeedback,
  getAllFeedback,
  createFeedback,
  deleteFeedback,
  updateFeedback,
};
export default FeedbackAPI;
