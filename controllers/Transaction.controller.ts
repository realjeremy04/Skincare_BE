import { NextFunction, Request, Response } from "express";
import Transaction from "$models/Transaction.model";
import AppError from "$root/utils/AppError.util";

/**
 * @swagger
 * components:
 *   schemas:
 *     Transaction:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The unique identifier for the transaction (auto-generated by MongoDB)
 *           readOnly: true
 *         customerId:
 *           type: string
 *           description: The ID of the customer making the transaction
 *         appointmentId:
 *           type: string
 *           description: The ID of the appointment associated with the transaction
 *         paymentMethod:
 *           type: string
 *           description: The payment method used (e.g., Credit Card, PayPal, etc.)
 *         status:
 *           type: string
 *           description: The status of the transaction (e.g., pending, completed, failed)
 *       required:
 *         - customerId
 *         - appointmentId
 *         - paymentMethod
 *         - status
 */

// Get all transactions
/**
 * @swagger
 * /api/transaction:
 *   get:
 *     summary: Retrieve a list of all transactions
 *     tags:
 *       - Transaction
 *     responses:
 *       200:
 *         description: A list of transactions
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Transaction'
 *       404:
 *         description: No transaction found
 *       500:
 *         description: Server error
 */
const getAllTransactions = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const transactions = await Transaction.find().populate(
      "customerId appointmentId"
    );
    if (transactions.length === 0) {
      return next(new AppError("No transactions found", 404));
    }
    res.status(200).json(transactions);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Get one transaction by ID
/**
 * @swagger
 * /api/transaction/{id}:
 *   get:
 *     summary: Retrieve a single transaction by ID
 *     tags:
 *       - Transaction
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: The transaction ID
 *     responses:
 *       200:
 *         description: A single transaction
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Transaction'
 *       404:
 *         description: Transaction not found
 *       500:
 *         description: Server error
 */
const getTransaction = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const transaction = await Transaction.findById(req.params.id).populate(
      "customerId appointmentId"
    );
    if (!transaction) {
      return next(new AppError("Transaction not found", 404));
    }
    res.status(200).json(transaction);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Create a new transaction
/**
 * @swagger
 * /api/transaction:
 *   post:
 *     summary: Create a new transaction
 *     tags:
 *       - Transaction
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Transaction'
 *     responses:
 *       201:
 *         description: The created transaction
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Transaction'
 *       400:
 *         description: Bad request
 *       500:
 *         description: Server error
 */
const createTransaction = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { customerId, appointmentId, paymentMethod, status } = req.body;

    if (!customerId || !appointmentId || !paymentMethod || !status) {
      return next(new AppError("All fields are required", 400));
    }

    const newTransaction = new Transaction({
      customerId,
      appointmentId,
      paymentMethod,
      status,
    });

    await newTransaction.save();
    res.status(201).json(newTransaction);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Update a transaction
/**
 * @swagger
 * /api/transaction/{id}:
 *   put:
 *     summary: Update an transaction by ID
 *     description: This endpoint allows the updating of an transaction based on its ID. Returns the updated transaction if successful.
 *     tags:
 *       - Transaction
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID of the transaction to update
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Transaction'
 *     responses:
 *       200:
 *         description: Transaction after updated
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Transaction'
 *       404:
 *         description: Transaction not found
 *       500:
 *         description: Server error
 */
const updateTransaction = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const updatedTransaction = await Transaction.findByIdAndUpdate(
      req.params.id,
      req.body,
      {
        new: true,
        runValidators: true,
      }
    ).populate("customerId appointmentId");

    if (!updatedTransaction) {
      return next(new AppError("Transaction not found", 404));
    }

    res.status(200).json(updatedTransaction);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Delete a transaction
/**
 * @swagger
 * /api/transaction/{id}:
 *   delete:
 *     summary: Delete an transaction by ID
 *     description: This endpoint allows the deletion of an transaction based on its ID. Returns the deleted transaction if successful.
 *     tags:
 *       - Transaction
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID of the transaction to delete
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Transaction deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request, invalid ID format
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       404:
 *         description: Transaction not found
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 */
const deleteTransaction = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const deletedTransaction = await Transaction.findByIdAndDelete(
      req.params.id
    );
    if (!deletedTransaction) {
      return next(new AppError("Transaction not found", 404));
    }
    res.status(200).json({ message: "Transaction deleted successfully" });
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

const TransactionAPI = {
  getAllTransactions,
  getTransaction,
  createTransaction,
  updateTransaction,
  deleteTransaction,
};

export default TransactionAPI;
