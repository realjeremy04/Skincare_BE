import { NextFunction, Request, Response } from "express";
import Transaction from "$models/Transaction.model";
import AppError from "$root/utils/AppError.util";

/**
 * @swagger
 * components:
 *   schemas:
 *     Transaction:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The unique identifier for the transaction (auto-generated by MongoDB)
 *           readOnly: true
 *         customerId:
 *           type: string
 *           description: The ID of the customer making the transaction
 *         appointmentId:
 *           type: string
 *           description: The ID of the appointment associated with the transaction
 *         paymentMethod:
 *           type: string
 *           description: The payment method used (e.g., Credit Card, PayPal, etc.)
 *         status:
 *           type: string
 *           description: The status of the transaction (e.g., pending, completed, failed)
 *       required:
 *         - customerId
 *         - appointmentId
 *         - paymentMethod
 *         - status
 */

// Get all transactions
const getAllTransactions = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const transactions = await Transaction.find().populate("customerId appointmentId");
    if (transactions.length === 0) {
      return next(new AppError("No transactions found", 404));
    }
    res.status(200).json(transactions);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Get one transaction by ID
const getTransaction = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const transaction = await Transaction.findById(req.params.id).populate("customerId appointmentId");
    if (!transaction) {
      return next(new AppError("Transaction not found", 404));
    }
    res.status(200).json(transaction);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Create a new transaction
const createTransaction = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const { customerId, appointmentId, paymentMethod, status } = req.body;

    if (!customerId || !appointmentId || !paymentMethod || !status) {
      return next(new AppError("All fields are required", 400));
    }

    const newTransaction = new Transaction({
      customerId,
      appointmentId,
      paymentMethod,
      status,
    });

    await newTransaction.save();
    res.status(201).json(newTransaction);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Update a transaction
const updateTransaction = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const updatedTransaction = await Transaction.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    }).populate("customerId appointmentId");

    if (!updatedTransaction) {
      return next(new AppError("Transaction not found", 404));
    }

    res.status(200).json(updatedTransaction);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Delete a transaction
const deleteTransaction = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const deletedTransaction = await Transaction.findByIdAndDelete(req.params.id);
    if (!deletedTransaction) {
      return next(new AppError("Transaction not found", 404));
    }
    res.status(200).json({ message: "Transaction deleted successfully" });
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

const TransactionAPI = {
  getAllTransactions,
  getTransaction,
  createTransaction,
  updateTransaction,
  deleteTransaction,
};

export default TransactionAPI;
