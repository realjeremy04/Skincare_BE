import { NextFunction, Request, Response } from "express";
import Question from "$models/Question.model";

/**
 * @swagger
 * components:
 *   schemas:
 *     Question:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The unique identifier for the question (auto-generated by MongoDB)
 *           readOnly: true
 *         title:
 *           type: string
 *           description: The title or text of the question
 *         answers:
 *           type: array
 *           description: A list of possible answers for the question
 *           items:
 *             $ref: '#/components/schemas/Answer'
 *       required:
 *         - title
 *         - answers
 *
 *     Answer:
 *       type: object
 *       properties:
 *         title:
 *           type: string
 *           description: The text or content of the answer
 *         point:
 *           type: number
 *           description: The point value assigned to the answer
 *       required:
 *         - title
 *         - point
 */

// Get all question
/**
 * @swagger
 * /api/question:
 *   get:
 *     summary: Retrieve a list of all question
 *     tags:
 *       - Question
 *     responses:
 *       200:
 *         description: A list of question
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Question'
 *       404:
 *         description: No question found
 *       500:
 *         description: Server error
 */
const getAllQuestion = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const questions = await Question.find();

    res.status(404).json({ message: "No questions found" });

    res.status(200).json(questions);
  } catch (err: Error | any) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Get one question
/**
 * @swagger
 * /api/question/{id}:
 *   get:
 *     summary: Retrieve a single question by ID
 *     tags:
 *       - Question
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: The question ID
 *     responses:
 *       200:
 *         description: A single question
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Question'
 *       404:
 *         description: Question not found
 *       500:
 *         description: Server error
 */
const getQuestion = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const question = await Question.findById(req.params.id);

    if (!question) {
      res.status(404).json({ message: "Question not found" });
    }

    res.status(200).json(question);
  } catch (err: Error | any) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Create one question
/**
 * @swagger
 * /api/question:
 *   post:
 *     summary: Create a new question
 *     tags:
 *       - Question
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Question'
 *     responses:
 *       201:
 *         description: The created question
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Question'
 *       400:
 *         description: Bad request
 *       500:
 *         description: Server error
 */
const createQuestion = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    if (!req.body.title || !req.body.answers) {
      res.status(400).json({ message: "Bad request" });
    }

    const question = new Question({
      title: req.body.title,
      answers: req.body.answers,
    });

    const newQuestion = await question.save();
    res.status(200).json(newQuestion);
  } catch (err: Error | any) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Delete one question
/**
 * @swagger
 * /api/question/{id}:
 *   delete:
 *     summary: Delete an question by ID
 *     description: This endpoint allows the deletion of an question based on its ID. Returns the deleted question if successful.
 *     tags:
 *       - Question
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID of the question to delete
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Question deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request, invalid ID format
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       404:
 *         description: Question not found
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 */
const deleteQuestion = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const question = await Question.findByIdAndDelete(req.params.id);
    res.status(200).json(question);
  } catch (err: Error | any) {
    res.status(500).json({ message: err.message });
  }
};

// Update one question
/**
 * @swagger
 * /api/question/{id}:
 *   put:
 *     summary: Update an question by ID
 *     description: This endpoint allows the updating of an question based on its ID. Returns the updated question if successful.
 *     tags:
 *       - Question
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID of the question to update
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Question'
 *     responses:
 *       200:
 *         description: Question after updated
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Question'
 *       404:
 *         description: Question not found
 *       500:
 *         description: Server error
 */
const updateQuestion = async (req: Request, res: Response) => {
  try {
    const question = await Question.findByIdAndUpdate(req.params.id, req.body);
    res.status(200).json(question);
  } catch (err: Error | any) {
    res.status(500).json({ message: err.message });
  }
};

const QuestionAPI = {
  getQuestion,
  getAllQuestion,
  createQuestion,
  deleteQuestion,
  updateQuestion,
};
export default QuestionAPI;
