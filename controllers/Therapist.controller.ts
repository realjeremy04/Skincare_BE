import { NextFunction, Request, Response } from "express";
import Therapist from "$models/Therapist.model";
import AppError from "$root/utils/AppError.util";

/**
 * @swagger
 * components:
 *   schemas:
 *     Therapist:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The unique identifier for the therapist (auto-generated by MongoDB)
 *           readOnly: true
 *         accountId:
 *           type: string
 *           description: The associated account ID
 *         specialization:
 *           type: array
 *           items:
 *             type: string
 *           description: List of service specializations
 *         certification:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               issuedBy:
 *                 type: string
 *               issuedDate:
 *                 type: string
 *                 format: date
 *           description: List of therapist certifications
 *         experience:
 *           type: string
 *           description: Experience details of the therapist
 *       required:
 *         - accountId
 *         - specialization
 *         - certification
 *         - experience
 */

// Get all therapists
const getAllTherapists = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const therapists = await Therapist.find().populate("accountId specialization");
    if (therapists.length === 0) {
      return next(new AppError("No therapists found", 404));
    }
    res.status(200).json(therapists);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Get one therapist by ID
const getTherapist = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const therapist = await Therapist.findById(req.params.id).populate("accountId specialization");
    if (!therapist) {
      return next(new AppError("Therapist not found", 404));
    }
    res.status(200).json(therapist);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Create a new therapist
const createTherapist = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const { accountId, specialization, certification, experience } = req.body;

    if (!accountId || !specialization || !certification || !experience) {
      return next(new AppError("All fields are required", 400));
    }

    const newTherapist = new Therapist({
      accountId,
      specialization,
      certification,
      experience,
    });

    await newTherapist.save();
    res.status(201).json(newTherapist);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Update therapist details
const updateTherapist = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const updatedTherapist = await Therapist.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    }).populate("accountId specialization");

    if (!updatedTherapist) {
      return next(new AppError("Therapist not found", 404));
    }

    res.status(200).json(updatedTherapist);
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

// Delete a therapist
const deleteTherapist = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const deletedTherapist = await Therapist.findByIdAndDelete(req.params.id);
    if (!deletedTherapist) {
      return next(new AppError("Therapist not found", 404));
    }
    res.status(200).json({ message: "Therapist deleted successfully" });
  } catch (err: any) {
    return next(new AppError("Internal Server Error", 500));
  }
};

const TherapistAPI = {
  getAllTherapists,
  getTherapist,
  createTherapist,
  updateTherapist,
  deleteTherapist,
};

export default TherapistAPI;
